name: Python recipe app

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15.0
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_flask_recipe_db
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables for testing
        env:
          DB_USER: postgres
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }} >> .env
          DB_PORT: '5432'
          DB_NAME: 'flask_recipe_db'
          DB_NAME_TEST: 'test_flask_recipe_db'
          CONFIG_ENV: "config.TestingConfig"
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }} >> .env
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }} >> .env
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }} >> .env
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }} >> .env
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }} >> .env
        run: |
          # Ensure PostgreSQL is ready before continuing
          export PGPASSWORD="${{ secrets.DB_PASSWORD }}"
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U postgres; do
            sleep 1
          done
          echo "PostgreSQL is ready."

      - name: Check .env file content
        run: cat .env

      - name: Print environment variables
        run: |
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}"
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}"
          
      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "github.workspace is: ${{ github.workspace }}"
          echo "Current directory: $(pwd)"
          ls -R
          pytest --maxfail=5 --disable-warnings --verbose tests/ --tb=short
