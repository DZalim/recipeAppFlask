name: Python recipe app

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15.0
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_flask_recipe_db
        ports:
          - 5432:5432
        # Needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # Step to checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step to set up Python
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Set environment variables and write them to .env file
      - name: Set environment variables for testing
        run: |
          echo "DB_USER=postgres" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_NAME=flask_recipe_db" >> .env
          echo "DB_NAME_TEST=test_flask_recipe_db" >> .env
          echo "CONFIG_ENV=config.TestingConfig" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> .env
          echo "EMAIL_SENDER=${{ secrets.EMAIL_SENDER }}" >> .env

      # Check the content of .env file to ensure environment variables are set correctly
      - name: Check .env file content
        run: cat .env

      # Print environment variables for verification
      - name: Print environment variables
        run: |
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}"
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}"
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"

      # Run tests with pytest
      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          DB_USER: postgres
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: 5432
          DB_NAME: flask_recipe_db
          DB_NAME_TEST: test_flask_recipe_db
          CONFIG_ENV: config.TestingConfig
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        run: |
          echo "github.workspace is: ${{ github.workspace }}"
          echo "Current directory: $(pwd)"
          ls -R
          pytest --maxfail=5 --disable-warnings --verbose tests/ --tb=short

